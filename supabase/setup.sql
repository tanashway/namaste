-- Create tables
create table if not exists public.memes (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  image_url text not null,
  wallet_address text not null,
  likes integer default 0
);

create table if not exists public.meme_likes (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  meme_id bigint references public.memes(id) on delete cascade,
  wallet_address text not null,
  unique(meme_id, wallet_address)
);

-- Create functions for likes
create or replace function public.increment_likes(meme_id bigint)
returns void as $$
begin
  update public.memes
  set likes = likes + 1
  where id = meme_id;
end;
$$ language plpgsql security definer;

create or replace function public.decrement_likes(meme_id bigint)
returns void as $$
begin
  update public.memes
  set likes = likes - 1
  where id = meme_id;
end;
$$ language plpgsql security definer;

-- Set up Row Level Security (RLS)
alter table public.memes enable row level security;
alter table public.meme_likes enable row level security;

-- Create policies
create policy "Anyone can view memes"
  on public.memes for select
  to anon
  using (true);

create policy "Anyone can insert memes"
  on public.memes for insert
  to anon
  with check (true);

create policy "Anyone can view likes"
  on public.meme_likes for select
  to anon
  using (true);

create policy "Anyone can insert likes"
  on public.meme_likes for insert
  to anon
  with check (true);

create policy "Anyone can delete their own likes"
  on public.meme_likes for delete
  to anon
  using (wallet_address = current_user);

-- Grant necessary permissions
grant usage on schema public to anon;
grant all on public.memes to anon;
grant all on public.meme_likes to anon;
grant execute on function public.increment_likes to anon;
grant execute on function public.decrement_likes to anon; 